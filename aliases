#!/usr/bin/env bash

alias which-shell="ps -p$$"

alias run="rs-run"
alias doc="rs-doc"

alias rs-test-lib="cargo test --lib --"
alias rs-clippy-all="rs-clippy --all-targets --all-features -- -W clippy::all"

alias rustfmt-check="rs-fmt-check"

alias rs-doc-private="cargo doc --document-private-items"

rs-doc-hidden() {(
    set -e
    local RUSTDOCFLAGS
    RUSTDOCFLAGS='-Z unstable-options --document-hidden-items' cargo +nightly doc --document-private-items "$@"
)}

alias cargo-new-week="cargo new $(date +y%yw%V)"

clean-proc-macro() {(
    set -e
    rm -v -f target/debug/deps/*macros* target/debug/deps/*derive*
)}

crate-version() {(
    set -e
    local package_id
    package_id=$(cargo pkgid --color never)
    egrep -o "([0-9]{1,}\.)+[0-9]{1,}" --color=never <<< "${package_id}"
)}

git-tag-crate-version() {(
    set -e

    local version
    version=$(crate-version)
    version="v${version}"

    if git show-ref --tags "${version}" --quiet; then
        echo Version tag already exists
        exit 1
    fi

    echo "Tagging $version"
    git tag "${version}"
)}

git-push-all-tags() {(
    set -e
    git push origin --tags
)}

alias git-clone-shallow="git clone --depth=1"

alias git-stash-untracked="git stash --include-untracked"

alias git-pop-head-keep-staged="git reset --soft HEAD~"
alias git-hard-reset-file="git checkout HEAD --"

alias git-rebase-root="git rebase -i --root"

alias git-log-follow="git log --follow --"

alias git-diff-word="git diff --color-words"
alias git-diff-char="git diff --color-words=."

git-diff() {(
    set -e

    git diff "$@" -- . \
        ':(exclude)Cargo.toml' \
        ':(exclude)Cargo.lock' \
        ':(exclude)package.json' \
        ':(exclude)package-lock.json'
)}

git-hard-reset-branch-to-origin() {(
    set -e

    local branch
    branch=$(git branch --show-current)

    git fetch origin
    git reset --hard origin/"$branch"
)}

git-current-branch() {(
    set -e
    git rev-parse --abbrev-ref HEAD
)}

git-push-up-to() {(
    set -e

    if [ -z "$1" ]; then
        echo "Error: Missing number of commits to go back" >&2
        return 1
    fi

    branch=$(git-current-branch)
    git push origin HEAD~"${1}":"${branch}"
)}

git-checkout-remote-branch() {(
    set -e

    local branch
    branch=$1
    shift

    git checkout -t origin/"$branch" "$@"
)}

git-set-upstream() {(
    set -e

    local origin
    origin=$(git remote get-url origin)

    read -e -p "Upstream: " -i "$origin" upstream

    git remote add upstream "$upstream"
)}

git-head-branch() {(
    set -e
    git branch --remotes --list '*/HEAD' --no-color | awk -F/ '{print $NF}' | grep --color="never" .
)}

git-pull-upstream() {(
    set -e

    local branch
    branch=$(git-head-branch)

    git fetch upstream
    git checkout "${branch}"
    git rebase upstream/"${branch}"
)}

git-open-remote() {(
    set -e
    local url
    url=$(git remote get-url origin)
    open-url "${url}"
)}

git-open-upstream() {(
    set -e
    local url
    url=$(git remote get-url upstream)
    open-url "${url}"
)}

# FIXME: macOS
# git-delete-merged-branches() {(
#     set -e
#
#     if [[ ! -v "NO_COLOR" ]]; then
#         ResetCol='\e[0m'
#         HelpCol='\e[1;31m'
#         PromptCol='\e[1;34m'
#     fi
#
#     branches=$(git branch --merged | egrep -v "(^\*|master|main|dev)")
#     branch_count=$(echo -n "$branches" | grep -c "^")
#
#     help="\
# y | yes  - delete branch
# n | no   - skip branch
# q | quit - skip remaining branches and quit
# s | show - show latest commit in branch"
#
#     i=1
#     while [ $i -le $branch_count ]; do
#         branch=$(sed "${i}q;d" <<< "$branches" | sed -e 's/^\s*//' -e '/^$/d' )
#
#         echo "Branch: \`$branch\`"
#
#         echo -e -n "${PromptCol}($i/$branch_count) [y,n,q,s,?]: ${ResetCol}"
#         read -r
#
#         case "$REPLY" in
#             y|Y|yes|YES)
#             git branch -D "$branch"
#             ;;
#
#             n|N|no|NO)
#             ;;
#
#             q|Q|quit|QUIT)
#             break
#             ;;
#
#             s|S|show|SHOW)
#             commit=$(git rev-parse "$branch")
#             git show "$commit"
#             continue
#             ;;
#
#             *)
#             echo -e "${HelpCol}${help}${ResetCol}"
#             continue
#             ;;
#         esac
#
#         i=$(($i + 1))
#     done
# )}

# Converts GitHub SSH URL into HTTPS URL, on mismatch
# then the input is echoed back
# Examples:
# - `git@github.com:foo/bar`     -> `https://github.com/foo/bar`
# - `git@github.com:foo/bar.git` -> `https://github.com/foo/bar`
gh-ssh-to-https() {
    local url="$1"
    if [[ "$url" =~ ^git@github.com:([^/]+)/([^/.]+)(\.git)?$ ]]; then
        local user="${BASH_REMATCH[1]}"
        local repo="${BASH_REMATCH[2]}"
        echo "https://github.com/$user/$repo"
    else
        echo $url
    fi
}

alias open-url="python -m webbrowser"

alias rs-grep="grep --color=auto --include=\*.rs --exclude-dir={.git,target,node_modules} -rinT . -e"

alias js-grep="grep --color=auto --include=\*.js --exclude-dir={.git,target,node_modules} -rinT . -e"
alias ts-grep="grep --color=auto --include=\*.ts --exclude-dir={.git,target,node_modules} -rinT . -e"

alias css-grep="grep --color=auto --include=\*.css --exclude-dir={.git,target,node_modules} -rinT . -e"
alias scss-grep="grep --color=auto --include=\*.scss --exclude-dir={.git,target,node_modules} -rinT . -e"

alias vscode-edit-dictionary="code $HOME/dictionary.txt"

append-dictionary() {(
    set -e

    for word in "$@"; do
        echo "$word" >> $HOME/dictionary.txt
    done
)}

# FIXME: macOS
# if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
#     note() {
#         nohup gedit "$@" > /dev/null &
#     }
# fi
