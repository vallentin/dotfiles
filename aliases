#!/usr/bin/env bash

alias run="rs-run"
alias doc="rs-doc"

alias rs-test-lib="cargo test --lib --"
alias rs-clippy-all="rs-clippy --all-targets --all-features -- -W clippy::all"

alias rustfmt-check="rs-fmt-check"

alias cargo-new-week="cargo new $(date +y%yw%V)"

alias git-clone-shallow="git clone --depth=1"

alias git-pop-head-keep-staged="git reset --soft HEAD~"
alias git-hard-reset-file="git checkout HEAD --"

alias git-diff-word="git diff --color-words"
alias git-diff-char="git diff --color-words=."

git-diff() {(
    set -e

    git diff "$@" -- . \
        ':(exclude)Cargo.toml' \
        ':(exclude)Cargo.lock' \
        ':(exclude)package.json' \
        ':(exclude)package-lock.json'
)}

git-hard-reset-branch-to-origin() {(
    set -e

    branch=$(git branch --show-current)

    git fetch origin
    git reset --hard origin/"$branch"
)}

git-delete-merged-branches() {(
    set -e

    if [[ ! -v "NO_COLOR" ]]; then
        ResetCol='\e[0m'
        HelpCol='\e[1;31m'
        PromptCol='\e[1;34m'
    fi

    branches=$(git branch --merged | egrep -v "(^\*|master|main|dev)")
    branch_count=$(echo -n "$branches" | grep -c "^")

    help="\
y | yes  - delete branch
n | no   - skip branch
q | quit - skip remaining branches and quit
s | show - show latest commit in branch"

    i=1
    while [ $i -le $branch_count ]; do
        branch=$(sed "${i}q;d" <<< "$branches" | sed -e 's/^\s*//' -e '/^$/d' )

        echo "Branch: \`$branch\`"

        echo -e -n "${PromptCol}($i/$branch_count) [y,n,q,s,?]: ${ResetCol}"
        read -r

        case "$REPLY" in
            y|Y|yes|YES)
            git branch -D "$branch"
            ;;

            n|N|no|NO)
            ;;

            q|Q|quit|QUIT)
            break
            ;;

            s|S|show|SHOW)
            commit=$(git rev-parse "$branch")
            git show "$commit"
            continue
            ;;

            *)
            echo -e "${HelpCol}${help}${ResetCol}"
            continue
            ;;
        esac

        i=$(($i + 1))
    done
)}

alias rs-grep="grep --color=auto --include=\*.rs --exclude-dir={.git,target,node_modules} -rinT . -e"

alias js-grep="grep --color=auto --include=\*.js --exclude-dir={.git,target,node_modules} -rinT . -e"
alias ts-grep="grep --color=auto --include=\*.ts --exclude-dir={.git,target,node_modules} -rinT . -e"

alias css-grep="grep --color=auto --include=\*.css --exclude-dir={.git,target,node_modules} -rinT . -e"
alias scss-grep="grep --color=auto --include=\*.scss --exclude-dir={.git,target,node_modules} -rinT . -e"

alias vscode-edit-dictionary="code $HOME/dictionary.txt"

if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
    note() {
        nohup gedit "$@" > /dev/null &
    }
fi
